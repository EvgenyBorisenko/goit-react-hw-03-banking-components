{"version":3,"sources":["components/TransactionHistory/TransactionHistory.module.css","components/Controls/Controls.module.css","components/Controls/Controls.js","components/Balance/Balance.js","components/TransactionHistory/TransactionHistory.js","components/Dashboard/Dashboard.js","components/App.js","serviceWorker.js","index.js","components/Balance/Balance.module.css"],"names":["module","exports","history","controls","controls_input","controls_buttonDeposit","Controls","_ref","inputValue","onChangeInput","onClickButton","react_default","a","createElement","className","s","value","onChange","type","data-id","onClick","controls_buttonWithdraw","Balance","balance","allDepositNumber","allWithdrawNumber","arrowUp","arrowDown","TransactionHistory","transactions","map","el","key","id","amount","date","toast","configure","Dashboard","state","notifyA","position","POSITION","TOP_CENTER","notifyB","e","_this","setState","Number","target","createTransaction","_this$state","dataset","newTransaction","shortid","Date","toLocaleString","prevState","concat","Object","toConsumableArray","reduce","acc","getBankInfo","localStorage","getItem","newPartState","JSON","parse","this","objectSpread","err","prevProps","_this$state2","setItem","stringify","_this$state3","components_Controls_Controls","components_Balance_Balance","components_TransactionHistory_TransactionHistory","Component","App","Fragment","components_Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef1a9db3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__2dsro\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__2LaaV\",\"controls_input\":\"Controls_controls_input__G09Pw\",\"controls_buttonDeposit\":\"Controls_controls_buttonDeposit__E03HR\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Controls.module.css';\n\nconst Controls = ({ inputValue, onChangeInput, onClickButton }) => {\n  return (\n    <section className={s.controls}>\n      <input\n        value={inputValue}\n        onChange={onChangeInput}\n        className={s.controls_input}\n        type=\"number\"\n      />\n      <button\n        data-id=\"Deposit\"\n        className={s.controls_buttonDeposit}\n        type=\"button\"\n        onClick={onClickButton}\n      >\n        Deposit\n      </button>\n      <button\n        data-id=\"Withdraw\"\n        className={s.controls_buttonWithdraw}\n        type=\"button\"\n        onClick={onClickButton}\n      >\n        Withdraw\n      </button>\n    </section>\n  );\n};\n\nControls.propTypes = {\n  inputValue: PropTypes.number.isRequired,\n  onChangeInput: PropTypes.func.isRequired,\n  onClickButton: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Balance.module.css';\n\nconst Balance = ({ balance, allDepositNumber, allWithdrawNumber }) => {\n  return (\n    <section className={s.balance}>\n      <span>\n        <span className={s.arrowUp}>&uarr;</span> {allDepositNumber} $\n      </span>\n      <span>\n        <span className={s.arrowDown}>&darr;</span> {allWithdrawNumber} $\n      </span>\n      <span> Balance: {balance} $ </span>\n    </section>\n  );\n};\n\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n  allDepositNumber: PropTypes.number.isRequired,\n  allWithdrawNumber: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ transactions }) => {\n  return (\n    <table className={s.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {transactions.map(el => (\n          <tr key={el.id}>\n            <td>{el.type}</td>\n            <td>{el.amount}</td>\n            <td>{el.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\n\n// const notify = () => toast('Wow so easy !');\n\ntoast.configure();\n\nclass Dashboard extends Component {\n  state = {\n    transactions: [],\n    balance: 0,\n    inputValue: 0,\n    allDepositNumber: 0,\n    allWithdrawNumber: 0,\n  };\n\n  componentDidMount() {\n    try {\n      const getBankInfo = localStorage.getItem('bankInfo');\n      // console.log('getBankInfo :', getBankInfo);\n\n      if (getBankInfo !== null) {\n        const newPartState = JSON.parse(getBankInfo);\n        this.setState({ ...newPartState });\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      transactions,\n      balance,\n      allDepositNumber,\n      allWithdrawNumber,\n    } = this.state;\n\n    if (prevState.transactions !== transactions) {\n      localStorage.setItem(\n        'bankInfo',\n        JSON.stringify({\n          transactions,\n          balance,\n          allDepositNumber,\n          allWithdrawNumber,\n        }),\n      );\n    }\n  }\n\n  notifyA = () =>\n    toast('На счету недостаточно средств для проведения операции!', {\n      position: toast.POSITION.TOP_CENTER,\n    });\n\n  notifyB = () =>\n    toast('Введите сумму для проведения операции!', {\n      position: toast.POSITION.TOP_CENTER,\n    });\n\n  onChangeInput = e => {\n    this.setState({\n      inputValue: Number(e.target.value),\n    });\n  };\n\n  createTransaction = e => {\n    const { inputValue, balance } = this.state;\n    if (inputValue === 0) {\n      this.notifyB();\n    } else if (e.target.dataset.id === 'Withdraw' && inputValue > balance) {\n      this.notifyA();\n    } else {\n      const type = e.target.dataset.id;\n      const newTransaction = {\n        id: shortid(),\n        type,\n        amount: inputValue,\n        date: new Date().toLocaleString('en-US'),\n      };\n      this.setState(prevState => ({\n        transactions: [...prevState.transactions, newTransaction],\n        balance: [...prevState.transactions, newTransaction].reduce(\n          (acc, el) => acc + (el.type === 'Deposit' ? +el.amount : -el.amount),\n          0,\n        ),\n        allDepositNumber: [...prevState.transactions, newTransaction].reduce(\n          (acc, el) => acc + (el.type === 'Deposit' ? el.amount : 0),\n          0,\n        ),\n        allWithdrawNumber: [...prevState.transactions, newTransaction].reduce(\n          (acc, el) => acc + (el.type !== 'Deposit' ? el.amount : 0),\n          0,\n        ),\n      }));\n    }\n  };\n\n  render() {\n    const {\n      inputValue,\n      transactions,\n      balance,\n      allDepositNumber,\n      allWithdrawNumber,\n    } = this.state;\n    return (\n      <div>\n        <Controls\n          onClickButton={this.createTransaction}\n          inputValue={inputValue}\n          onChangeInput={this.onChangeInput}\n        />\n        <Balance\n          allWithdrawNumber={allWithdrawNumber}\n          allDepositNumber={allDepositNumber}\n          balance={balance}\n        />\n        <TransactionHistory transactions={transactions} />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from './Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <>\n      <Dashboard />\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__35aot\",\"arrowUp\":\"Balance_arrowUp__dyiDX\",\"arrowDown\":\"Balance_arrowDown__1folO\"};"],"sourceRoot":""}